26.11.2024  
Тема: Выполнение и сопровождение организационных (производственных) задач, разработанных для организации

Выполненная работа:
- Counterpartie.cs
  - Добавлены свойства для класса `Counterpartie`, такие как `Name`, `LegalAddress`, `PhoneNumber`, `PostalAddress`, `Unp`, и другие, с валидацией и механизмом уведомления об изменении через метод `SetProperty`.
  - Обработаны различные типы данных контрагентов (физические и юридические лица) с использованием перечисления `CounterpartieType`.
  - Реализованы списки `Contracts` и `Receipts` для хранения информации о контрактах и поступлениях.
- MainWindow.xaml.cs
  - Обновлен метод навигации по страницам, добавлена ссылка на страницу для работы с контрагентами.
- LengthRangeValidationRule.cs
  - Разработан класс `LengthRangeValidationRule`, предназначенный для проверки длины строкового ввода, с возможностью настройки минимальной и максимальной длины.
- PhoneNumberValidationRule.cs
  - Реализован класс `PhoneNumberValidationRule`, который проверяет корректность ввода номера телефона по нескольким регулярным выражениям для разных форматов (международный, российский и с дефисами).
- CounterpartieViewTable.xaml
  - Создана и оформлена XAML-страница для отображения контрагентов с использованием `DataGrid`, с возможностью редактирования и проверки введенных данных через привязку валидации.
  - Добавлены столбцы для различных атрибутов контрагентов, таких как `Name`, `LegalAddress`, `PhoneNomber`, `PostalAddress`, `Unp`, и другие.
- CounterpartieViewTable.xaml.cs
  - Создан ViewModel для работы с контрагентами, включая методы для создания новых записей, фильтрации и работы с данными контрагентов.
  - Добавлена возможность работы с кэшированными данными при навигации между страницами.


Задача заключалась в реализации и настройке компонентов для работы с контрагентами в приложении, включая создание классов для работы с базой данных, валидацию введенных данных и реализацию интерфейса для отображения и редактирования данных контрагентов.