10.12.2024  
Тема: Выполнение и сопровождение организационных (производственных) задач, разработанных для организации

1. Обнаруженные проблемы в ходе тестирования
1.1 Ошибка в отображении и загрузке данных о материалах  
Файл: `VacTrack/ViewTables/ReceiptViewTable.xaml.cs`  
	Описание проблемы:  
В ходе тестирования модуля поступлений выяснилось, что данные о материалах не загружаются полностью. Это было связано с отсутствием корректной загрузки связанных данных, таких как единицы измерения.  
	Решение:  
Добавлен вызов `Include(m => m.Unit).Load()` для полной загрузки связанных данных.  
	Причина выбора решения:  
Использование `Include` с последующей загрузкой позволяет избежать проблем с ленивой загрузкой, обеспечивая наличие всех связанных данных, что необходимо для корректного отображения в интерфейсе.  

1.2 Ошибка некорректного значения в поле «Количество»  
Файлы:  
- `DatabaseManager/Contract.cs`  
- `DatabaseManager/Product.cs`  
	Описание проблемы:  
Было выявлено, что в некоторых случаях значение поля «Количество» становилось отрицательным из-за некорректного ввода или обработки данных.  
	Решение:  
Изменена логика сеттера для свойства `Count`. Теперь любое отрицательное значение автоматически заменяется на 0.  
	Причина выбора решения:  
Такой подход минимизирует вероятность возникновения критических ошибок в расчетах или логике работы приложения, сохраняя данные в допустимых пределах. Это простое и эффективное решение, которое предотвращает нежелательное поведение.  

1.3 Недостаточная валидация пользовательского ввода в таблице товаров  
Файл: `VacTrack/ViewTables/ProductViewTable.xaml`  
	Описание проблемы:  
Во время тестирования выяснилось, что в поле «Количество» можно вводить пустые или отрицательные значения, что нарушает бизнес-логику.  
	Решение:  
Добавлены валидационные правила:  
- `NotEmptyValidationRule` — предотвращает ввод пустого значения.  
- `PositiveNumberValidationRule` — проверяет, чтобы вводимое значение было положительным.  
	Причина выбора решения:  
Использование встроенных механизмов валидации WPF позволяет удобно управлять ошибками ввода на уровне интерфейса, не перегружая логику бизнес-слоя. Этот метод улучшает пользовательский опыт и предотвращает ошибочные данные ещё на этапе ввода.